{"version":3,"sources":["abc.gif","App.js","serviceWorker.js","index.js"],"names":["module","exports","SpeechRecognition","window","webkitSpeechRecognition","App","useState","from","email","subject","body","send","data","setData","box1","useRef","box2","box3","box4","card","sub","mode","setMode","gif","setGif","load","setLoad","success","setSuccess","end","synth","speechSynthesis","message","SpeechSynthesisUtterance","lang","onend","event","recognition","start","onstart","console","log","onresult","e","current","resultIndex","results","transcript","includes","document","getElementById","click","speak","className","ref","align","onChange","style","backgroundColor","color","checked","height","src","GIF","alt","type","name","autoFocus","required","readOnly","x-webkit-speech","placeholder","defaultValue","onClick","elapsedTime","replace","toLowerCase","stop","rows","id","preventDefault","params","URLSearchParams","append","axios","post","then","res","status","focus","catch","err","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.320d388c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/abc.314e8d99.gif\";","import React, { useState, useRef } from \"react\";\nimport \"./app.css\";\nimport axios from \"axios\";\nimport Switch from \"react-switch\";\nimport GIF from \"./abc.gif\";\nconst SpeechRecognition =\n  window.SpeechRecognition || window.webkitSpeechRecognition;\n\nfunction App() {\n  const [data, setData] = useState({\n    from: \"\",\n    email: \"\",\n    subject: \"\",\n    body: \"\",\n    send: false\n  });\n  const box1 = useRef();\n  const box2 = useRef();\n  const box3 = useRef();\n  const box4 = useRef();\n  const card = useRef();\n  const sub = useRef();\n  const [mode, setMode] = useState(false);\n  const [gif, setGif] = useState(false);\n  const [load, setLoad] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const handleClick = e => {\n    e.preventDefault();\n    setGif(false);\n    console.log(\"sending\");\n    setLoad(false);\n    var params = new URLSearchParams();\n    params.append(\"email\", data.email);\n    params.append(\"from\", data.from);\n    params.append(\"body\", data.body);\n    params.append(\"subject\", data.subject);\n    axios\n      .post(\"https://letsgowithmkn.000webhostapp.com/test.php\", params)\n      .then(res => {\n        if (res.data.status === \"Yes\") {\n          setLoad(true);\n          setSuccess(true);\n          sub.current.focus();\n        }\n      })\n      .catch(err => {\n        setLoad(true);\n        setSuccess(false);\n        sub.current.focus();\n        console.log(err);\n      });\n    // const upperCase =\n    //   transcript.charAt(0).toUpperCase() + transcript.substring(1);\n    // console.log(upperCase);\n  };\n  const speakHandleBody = () => {\n    let synth = window.speechSynthesis;\n    let message = new SpeechSynthesisUtterance(\"Tell me about Body\");\n    message.lang = \"hi-IN\";\n    message.onend = function(event) {\n      console.log(\"Finished in \" + event.elapsedTime + \" seconds.\");\n      let recognition = new SpeechRecognition();\n      recognition.start();\n      recognition.onstart = () => {\n        setGif(true);\n      };\n      console.log(\"listening for body\");\n      recognition.onresult = e => {\n        const current = e.resultIndex;\n        const transcript = e.results[current][0].transcript;\n        setData({\n          ...data,\n          body: transcript + \"\"\n        });\n      };\n\n      recognition.onend = () => {\n        setGif(false);\n        end();\n      };\n    };\n    synth.speak(message);\n  };\n  const end = () => {\n    let synth = window.speechSynthesis;\n    let message = new SpeechSynthesisUtterance(\n      \"Should i send mail now? Reply in Yes or No\"\n    );\n    message.lang = \"hi-IN\";\n    message.onend = event => {\n      let recognition = new SpeechRecognition();\n      recognition.lang = \"en-GB\";\n      recognition.start();\n      recognition.onstart = () => {\n        setGif(true);\n      };\n      console.log(\"listening for body\");\n      recognition.onresult = e => {\n        const current = e.resultIndex;\n        const transcript = e.results[current][0].transcript;\n        let str = transcript + \"\";\n        if (str.includes(\"yes\")) {\n          console.log(data, \"sending mail...\");\n          setGif(false);\n          return 0;\n        } else {\n          console.log(\"Response is no or unusual\");\n          setGif(false);\n        }\n      };\n      recognition.onend = () => {\n        setGif(false);\n        document.getElementById(\"btn\").click();\n        return 0;\n      };\n    };\n    synth.speak(message);\n  };\n  const speakHandleSubject = () => {\n    let synth = window.speechSynthesis;\n    let message = new SpeechSynthesisUtterance(\"Tell me about Subject Line\");\n    message.lang = \"hi-IN\";\n    message.onend = function(event) {\n      console.log(\"Finished in \" + event.elapsedTime + \" seconds.\");\n      let recognition = new SpeechRecognition();\n      recognition.lang = \"en-GB\";\n      recognition.start();\n      recognition.onstart = () => {\n        setGif(true);\n      };\n      console.log(\"listening for subject\");\n      recognition.onresult = e => {\n        const current = e.resultIndex;\n        const transcript = e.results[current][0].transcript;\n        setData({\n          ...data,\n          subject: transcript + \"\"\n        });\n      };\n      recognition.onend = () => {\n        setGif(false);\n        recognition.stop();\n      };\n    };\n    synth.speak(message);\n  };\n  const speakHandleEmailTo = () => {\n    let synth = window.speechSynthesis;\n    let message = new SpeechSynthesisUtterance(\"Tell me about receiver email\");\n    message.lang = \"hi-IN\";\n    message.onend = function(event) {\n      console.log(\"Finished in \" + event.elapsedTime + \" seconds.\");\n      let recognition = new SpeechRecognition();\n      recognition.lang = \"en-GB\";\n      recognition.start();\n      recognition.onstart = () => {\n        setGif(true);\n      };\n      console.log(\"listening for receiver email\");\n      recognition.onresult = e => {\n        const current = e.resultIndex;\n        const transcript = e.results[current][0].transcript;\n        let email = transcript + \"\";\n        setData({\n          ...data,\n          email: email.replace(/\\s/g, \"\").toLowerCase()\n        });\n      };\n      recognition.onend = () => {\n        setGif(false);\n        recognition.stop();\n      };\n    };\n    synth.speak(message);\n  };\n  const speakHandleEmailFrom = () => {\n    setGif(true);\n    let synth = window.speechSynthesis;\n    let message = new SpeechSynthesisUtterance(\"Tell me about Your email\");\n    message.lang = \"hi-IN\";\n    message.onend = function(event) {\n      console.log(\"Finished in \" + event.elapsedTime + \" seconds.\");\n      let recognition = new SpeechRecognition();\n      recognition.lang = \"en-GB\";\n      recognition.start();\n      recognition.onstart = () => {\n        setGif(true);\n      };\n      console.log(\"listening for your email\");\n      recognition.onresult = e => {\n        const current = e.resultIndex;\n        const transcript = e.results[current][0].transcript;\n        let email = transcript + \"\";\n        setData({\n          ...data,\n          from: email.replace(/\\s/g, \"\").toLowerCase()\n        });\n      };\n      recognition.onend = () => {\n        setGif(false);\n        recognition.stop();\n      };\n    };\n    synth.speak(message);\n  };\n  const handleChange = mode => {\n    if (mode === false) {\n      setMode(false);\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"#000\";\n      box1.current.className = \"box\";\n      box2.current.className = \"box\";\n      box3.current.className = \"box\";\n      box4.current.className = \"box\";\n      card.current.className = \"card\";\n      if (load) {\n        sub.current.className = \"card\";\n      }\n    } else {\n      setMode(true);\n      document.body.style.backgroundColor = \"#1d1c19\";\n      document.body.style.color = \"white\";\n      box1.current.className = \"darkbox\";\n      box2.current.className = \"darkbox\";\n      box3.current.className = \"darkbox\";\n      box4.current.className = \"darkbox\";\n      card.current.className = \"card darkcard\";\n      if (load) {\n        sub.current.className = \"card darkcard\";\n      }\n    }\n  };\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-lg-1 col-md-1\"></div>\n        <div className=\"col-lg-10 col-md-10\">\n          <div className=\"card\" ref={card} align=\"center\">\n            <h1>Voice Email</h1>\n            <div className=\"col\">\n              <div className=\"row-1\"></div>\n              <div className=\"row-10\">\n                <Switch onChange={handleChange} checked={mode}></Switch>\n              </div>\n              <div className=\"row-1\"></div>\n            </div>\n            <h6>Click on Fields to talk,and reply after each beap </h6>\n            {gif ? (\n              <img\n                style={{ height: \"20vh\", backgroundColor: \"rgba(0,0,0,0.01)\" }}\n                src={GIF}\n                alt=\"Listening gif\"\n              />\n            ) : (\n              \"\"\n            )}\n            <input\n              ref={box4}\n              type=\"email\"\n              name=\"from\"\n              autoFocus\n              required\n              readOnly\n              className=\"box\"\n              x-webkit-speech=\"true\"\n              placeholder=\"Enter Your Email\"\n              defaultValue={data.from}\n              onClick={speakHandleEmailFrom}\n            ></input>\n            <br />\n            <input\n              ref={box1}\n              type=\"email\"\n              name=\"email\"\n              readOnly\n              className=\"box\"\n              x-webkit-speech=\"true\"\n              required\n              placeholder=\"Enter Receiver Email\"\n              defaultValue={data.email}\n              onClick={speakHandleEmailTo}\n            ></input>\n            <br />\n            <input\n              ref={box2}\n              type=\"text\"\n              name=\"subject\"\n              x-webkit-speech=\"true\"\n              className=\"box\"\n              readOnly\n              required\n              placeholder=\"Enter Subject\"\n              defaultValue={data.subject}\n              onClick={speakHandleSubject}\n            ></input>\n            <br />\n            <textarea\n              ref={box3}\n              type=\"text\"\n              rows=\"5\"\n              className=\"box\"\n              x-webkit-speech=\"true\"\n              name=\"body\"\n              readOnly\n              required\n              placeholder=\"Enter Body\"\n              defaultValue={data.body}\n              onClick={speakHandleBody}\n            ></textarea>\n            <br />\n            <input\n              id=\"btn\"\n              type=\"hidden\"\n              className=\"btns btn-success\"\n              onClick={handleClick}\n            ></input>\n          </div>\n        </div>\n        <div className=\"col-lg-1 col-md-1\"></div>\n      </div>\n      {load ? (\n        success ? (\n          <div className=\"row\">\n            <div className=\"col-lg-1 col-md-1\"></div>\n            <div className=\"col-md-10 col-lg-10\">\n              <div className=\"card\" ref={sub}>\n                <h6 className=\"alert-success\">Email Sent Successfully!</h6>\n                From:&nbsp;{data.from}\n                <hr />\n                To:&nbsp;{data.email}\n                <hr />\n                Subject:&nbsp;{data.subject}\n                <hr />\n                Body:&nbsp;{data.body}\n              </div>\n            </div>\n            <div className=\"col-md-1 col-lg-1\"></div>\n          </div>\n        ) : (\n          <div className=\"row\">\n            <div className=\"col-lg-1 col-md-1\"></div>\n            <div className=\"col-md-10 col-lg-10\">\n              <div className=\"card\" ref={sub}>\n                <h6 className=\"alert-success\">\n                  There is error in sending email! Please check data.\n                </h6>\n                From:&nbsp;{data.from}\n                <hr />\n                To:&nbsp;{data.email}\n                <hr />\n                Subject:&nbsp;{data.subject}\n                <hr />\n                Body:&nbsp;{data.body}\n              </div>\n            </div>\n            <div className=\"col-md-1 col-lg-1\"></div>\n          </div>\n        )\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}