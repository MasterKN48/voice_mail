{"version":3,"sources":["App.js","serviceWorker.js","index.js","abc.gif"],"names":["SpeechRecognition","window","webkitSpeechRecognition","App","useState","email","subject","body","send","data","setData","box1","useRef","box2","box3","card","mode","setMode","gif","setGif","load","setLoad","end","synth","speechSynthesis","message","SpeechSynthesisUtterance","lang","onend","event","recognition","start","console","log","onresult","e","current","resultIndex","transcript","results","includes","document","getElementById","click","speak","className","ref","align","style","fontSize","onChange","backgroundColor","color","checked","height","src","GIF","alt","type","name","autoFocus","readOnly","x-webkit-speech","placeholder","defaultValue","onClick","elapsedTime","replace","toLowerCase","stop","rows","id","preventDefault","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.09fff18c.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./app.css\";\nimport Switch from \"react-switch\";\nimport GIF from \"./abc.gif\";\nconst SpeechRecognition =\n  window.SpeechRecognition || window.webkitSpeechRecognition;\n\nfunction App() {\n  const [data, setData] = useState({\n    email: \"\",\n    subject: \"\",\n    body: \"\",\n    send: false\n  });\n  const box1 = useRef();\n  const box2 = useRef();\n  const box3 = useRef();\n  const card = useRef();\n  const [mode, setMode] = useState(false);\n  const [gif, setGif] = useState(false);\n  const [load, setLoad] = useState(false);\n  const handleClick = e => {\n    e.preventDefault();\n    console.log(\"send\", data);\n    setLoad(true);\n    // const upperCase =\n    //   transcript.charAt(0).toUpperCase() + transcript.substring(1);\n    // console.log(upperCase);\n  };\n  const speakHandleBody = () => {\n    setGif(true);\n    let synth = window.speechSynthesis;\n    let message = new SpeechSynthesisUtterance(\"Tell me about Body\");\n    message.lang = \"hi-IN\";\n    message.onend = function(event) {\n      console.log(\"Finished in \" + event.elapsedTime + \" seconds.\");\n      let recognition = new SpeechRecognition();\n      recognition.start();\n      console.log(\"listening for body\");\n      recognition.onresult = e => {\n        const current = e.resultIndex;\n        const transcript = e.results[current][0].transcript;\n        setData({\n          ...data,\n          body: transcript + \"\"\n        });\n        console.log(transcript);\n      };\n      recognition.onend = () => {\n        end();\n        setGif(false);\n      };\n    };\n    synth.speak(message);\n  };\n  const end = () => {\n    setGif(true);\n    let synth = window.speechSynthesis;\n    let message = new SpeechSynthesisUtterance(\n      \"Should i send mail now? Reply in Yes or No\"\n    );\n    message.lang = \"hi-IN\";\n    message.onend = event => {\n      let recognition = new SpeechRecognition();\n      recognition.lang = \"en-GB\";\n      recognition.start();\n      console.log(\"listening for body\");\n      recognition.onresult = e => {\n        const current = e.resultIndex;\n        const transcript = e.results[current][0].transcript;\n        console.log(transcript);\n        let str = transcript + \"\";\n        if (str.includes(\"yes\")) {\n          console.log(data, \"sending mail...\");\n          return 0;\n        } else {\n          console.log(\"Response is no or unusual\");\n        }\n      };\n      recognition.onend = () => {\n        setGif(false);\n        document.getElementById(\"btn\").click();\n        return 0;\n      };\n    };\n    synth.speak(message);\n  };\n  const speakHandleSubject = () => {\n    setGif(true);\n    let synth = window.speechSynthesis;\n    let message = new SpeechSynthesisUtterance(\"Tell me about Subject Line\");\n    message.lang = \"hi-IN\";\n    message.onend = function(event) {\n      console.log(\"Finished in \" + event.elapsedTime + \" seconds.\");\n      let recognition = new SpeechRecognition();\n      recognition.lang = \"en-GB\";\n      recognition.start();\n      console.log(\"listening for subject\");\n      recognition.onresult = e => {\n        const current = e.resultIndex;\n        const transcript = e.results[current][0].transcript;\n        setData({\n          ...data,\n          subject: transcript + \"\"\n        });\n        console.log(transcript);\n      };\n      recognition.stop();\n      setGif(false);\n    };\n    synth.speak(message);\n  };\n  const speakHandleEmail = () => {\n    setGif(true);\n    let synth = window.speechSynthesis;\n    let message = new SpeechSynthesisUtterance(\"Tell me about receiver email\");\n    message.lang = \"hi-IN\";\n    message.onend = function(event) {\n      console.log(\"Finished in \" + event.elapsedTime + \" seconds.\");\n      let recognition = new SpeechRecognition();\n      recognition.lang = \"en-GB\";\n      recognition.start();\n      console.log(\"listening for receiver email\");\n      recognition.onresult = e => {\n        const current = e.resultIndex;\n        const transcript = e.results[current][0].transcript;\n        let email = transcript + \"\";\n        setData({\n          ...data,\n          email: email.replace(/\\s/g, \"\").toLowerCase()\n        });\n        console.log(transcript);\n      };\n      recognition.stop();\n      setGif(false);\n    };\n    synth.speak(message);\n  };\n  const handleChange = mode => {\n    if (mode === false) {\n      setMode(false);\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"#000\";\n      box1.current.className = \"box\";\n      box2.current.className = \"box\";\n      box3.current.className = \"box\";\n      card.current.className = \"card\";\n    } else {\n      setMode(true);\n      document.body.style.backgroundColor = \"#1d1c19\";\n      document.body.style.color = \"white\";\n      box1.current.className = \"darkbox\";\n      box2.current.className = \"darkbox\";\n      box3.current.className = \"darkbox\";\n      card.current.className = \"card darkcard\";\n    }\n  };\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-lg-1 col-md-1\"></div>\n        <div className=\"col-lg-10 col-md-10\">\n          <div className=\"card\" ref={card} align=\"center\">\n            <h1>\n              Voice Email<sup style={{ fontSize: \"10px\" }}>beta 0.5</sup>{\" \"}\n            </h1>\n            <div className=\"col\">\n              <div className=\"row-1\"></div>\n              <div className=\"row-10\">\n                <Switch onChange={handleChange} checked={mode}></Switch>\n              </div>\n              <div className=\"row-1\"></div>\n            </div>\n            <h6>Click on Fields to talk,and reply after each beap </h6>\n            {gif ? (\n              <img\n                style={{ height: \"20vh\", backgroundColor: \"rgba(0,0,0,0.01)\" }}\n                src={GIF}\n                alt=\"Listening gif\"\n              />\n            ) : (\n              \"\"\n            )}\n            <input\n              ref={box1}\n              type=\"email\"\n              name=\"email\"\n              autoFocus\n              className=\"box\"\n              readOnly\n              x-webkit-speech=\"true\"\n              placeholder=\"Enter Email\"\n              defaultValue={data.email}\n              onClick={speakHandleEmail}\n            ></input>\n            <br />\n            <input\n              ref={box2}\n              type=\"text\"\n              name=\"subject\"\n              x-webkit-speech=\"true\"\n              readOnly\n              className=\"box\"\n              placeholder=\"Enter Subject\"\n              defaultValue={data.subject}\n              onClick={speakHandleSubject}\n            ></input>\n            <br />\n            <textarea\n              ref={box3}\n              type=\"text\"\n              rows=\"5\"\n              readOnly\n              className=\"box\"\n              x-webkit-speech=\"true\"\n              name=\"body\"\n              placeholder=\"Enter Body\"\n              defaultValue={data.body}\n              onClick={speakHandleBody}\n            ></textarea>\n            <br />\n            <button id=\"btn\" className=\"btns btn-success\" onClick={handleClick}>\n              Submit\n            </button>\n          </div>\n        </div>\n        <div className=\"col-lg-1 col-md-1\"></div>\n      </div>\n      {load ? (\n        <div className=\"row\">\n          <div className=\"col-lg-1 col-md-1\"></div>\n          <div className=\"col-md-10 col-lg-10\">\n            <div className=\"card\">\n              <h6 className=\"alert-success\">\n                Your Email will be send when backend is ready,rest your data is\n                here:{\" \"}\n              </h6>\n              Email:{data.email}\n              <hr />\n              Subject:{data.subject}\n              <hr />\n              Body:{data.body}\n            </div>\n          </div>\n          <div className=\"col-md-1 col-lg-1\"></div>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/abc.314e8d99.gif\";"],"sourceRoot":""}